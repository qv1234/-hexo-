{"type":"getPostById","data":{"title":"Docker容器","date":"2023-03-13T12:32:23.838Z","description":"","categories":[{"name":"Linux","_id":"clf8visfd00049kq4bz35ggc4"}],"tags":[{"name":"Linux","_id":"clf8visfg00059kq4dwn56651"}],"content":"<h2 id=\"1-Docker概述\"><a href=\"#1-Docker概述\" class=\"headerlink\" title=\"1.Docker概述:\"></a>1.Docker概述:</h2><h3 id=\"1-docker的概念：\"><a href=\"#1-docker的概念：\" class=\"headerlink\" title=\"1.docker的概念：\"></a>1.docker的概念：</h3><ol>\n<li><p>Docker是一个<strong>开源的应用容器引擎</strong></p>\n</li>\n<li><p>Docker是一个用于开发，交付和运行应用程序的开放平台</p>\n</li>\n<li></li>\n<li><p>诞生于2013年初，基于Go语言实现，dotCloud公司出品（后改名为Docker Inc）</p>\n</li>\n<li><p>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级，可移植的容器中，然后发布到任何流行的Linux机器上</p>\n</li>\n<li><p>可以将<strong>程序及其依赖、运行环境一起打包为一个镜像</strong>，可以迁移到任意Linux操作系统</p>\n</li>\n<li><p>容器时完全使用<strong>沙箱机制</strong>，相互隔离</p>\n</li>\n<li><p>容器性能开销极低</p>\n</li>\n<li><p>Docker从17.03版本之后分为CE（社区版）和EE（企业版）</p>\n</li>\n<li><p>总结：</p>\n</li>\n</ol>\n<p>   docker是一种容器技术，解决软件跨环境迁移的问题</p>\n<h3 id=\"2-Docker解决的问题：\"><a href=\"#2-Docker解决的问题：\" class=\"headerlink\" title=\"2.Docker解决的问题：\"></a>2.Docker解决的问题：</h3><ul>\n<li>Docker如何解决依赖的兼容问题：<ul>\n<li>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</li>\n<li>将每个应用放到一个隔离容器去运行，避免互相干扰</li>\n</ul>\n</li>\n<li>Docker如何解决不同系统环境的问题：<ul>\n<li>Docker将<strong>用户程序</strong>与所需要调用的系统(比如Ubuntu**)函数库<strong>一起</strong>打包**</li>\n<li>Docker运行到不同操作系统时，直接基于打包的库函数，<strong>借助</strong>于操作系统的<strong>Linux内核来运行</strong></li>\n</ul>\n</li>\n<li>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？<ul>\n<li>Docker允许开发中将应用、依赖、函数库、配置一起打包，形成可移植镜像</li>\n<li>Docker应用运行在容器中，使用沙箱机制，相互隔离</li>\n</ul>\n</li>\n<li>Docker如何解决开发、测试、生产环境有差异的问题<ul>\n<li>Docker镜像中包含完整运行环境，包括系统函数库，仅<strong>依赖系统的Linux内核</strong>，因此可以在任意Linux操作系统上运行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-DokcerHub：\"><a href=\"#3-DokcerHub：\" class=\"headerlink\" title=\"3.DokcerHub：\"></a>3.DokcerHub：</h3><ul>\n<li>DockerHub是一个<strong>Docker镜像的托管平台</strong>。这样的平台称为Docker Registry</li>\n</ul>\n<h2 id=\"2-安装Docker：\"><a href=\"#2-安装Docker：\" class=\"headerlink\" title=\"2.安装Docker：\"></a>2.安装Docker：</h2><ul>\n<li><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine-selinux \\</span><br><span class=\"line\">                  docker-engine \\</span><br><span class=\"line\">                  docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>首先需要大家虚拟机联网，安装yum工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils \\</span><br><span class=\"line\">           device-mapper-persistent-data \\</span><br><span class=\"line\">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加docker镜像到本地：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置docker镜像源</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后输入命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如发生报错：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/04a2f5ecf86d4fc8866fe7ac26393cbd.png\" alt=\"img\"></p>\n</li>\n<li><p>解决方案：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum erase podman buildan</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y docker-ce --allowerasing</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看是否安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启docker服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像加速：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cr.console.aliyun.com/cn-wulanchabu/instances/mirrors</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-Docker架构\"><a href=\"#3-Docker架构\" class=\"headerlink\" title=\"3.Docker架构\"></a>3.Docker架构</h2><ul>\n<li><p>图示：</p>\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230311180220664.png\" alt=\"image-20230311180220664\"></p>\n</li>\n<li><p>Docker是一个<strong>CS架构</strong>的程序，由两部分组成：</p>\n<ul>\n<li><p><strong>服务端</strong>（server）：Docker守护进程，负责处理Docker指令，管理镜像，容器等</p>\n</li>\n<li><p><strong>客户端</strong>(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令</p>\n</li>\n</ul>\n</li>\n<li><p>描述：</p>\n<ul>\n<li><strong>镜像（image）</strong>：<ul>\n<li><p>Docker将应用程序及其所需的依赖，函数库，环境，配置等文件打包在一起</p>\n</li>\n<li><p>是一个文件系统</p>\n</li>\n<li><p>相当于<strong>Class类</strong></p>\n</li>\n<li><p><strong>容器（Container）</strong>：</p>\n<ul>\n<li><p>镜像中的应用程序运行后形成的进程就是容器，只是Docker会给容器做隔离，对外不可见</p>\n</li>\n<li><p>相当于Example<strong>实例</strong>（根据类创建出来的对象）</p>\n</li>\n</ul>\n</li>\n<li><p><strong>仓库</strong>：</p>\n<ul>\n<li>仓库可看成一个代码控制中心，用来保存镜像</li>\n<li>分类：远程仓库，私有仓库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-docker命令：\"><a href=\"#4-docker命令：\" class=\"headerlink\" title=\"4.docker命令：\"></a>4.docker命令：</h2><h3 id=\"1-操作进程命令：\"><a href=\"#1-操作进程命令：\" class=\"headerlink\" title=\"1.操作进程命令：\"></a>1.操作进程命令：</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>systemctl start docker</td>\n<td>启动docker服务</td>\n</tr>\n<tr>\n<td>systemctl stop docker</td>\n<td>停止docker服务</td>\n</tr>\n<tr>\n<td>systemctl restart docker</td>\n<td>重启docker服务</td>\n</tr>\n<tr>\n<td>systemctl status docker</td>\n<td>查看docker服务状态</td>\n</tr>\n<tr>\n<td>systemctl enable docker</td>\n<td>开机启动docker服务</td>\n</tr>\n<tr>\n<td>systemctl disable docker</td>\n<td>关闭开机启动docker服务</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-查看帮助：\"><a href=\"#2-查看帮助：\" class=\"headerlink\" title=\"2.查看帮助：\"></a>2.查看帮助：</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker –help</td>\n<td>查看docker所有帮助</td>\n</tr>\n<tr>\n<td>docker [命令] –help</td>\n<td>查看docker相关命令的帮助</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-操作镜像命令：\"><a href=\"#3-操作镜像命令：\" class=\"headerlink\" title=\"3.操作镜像命令：\"></a>3.操作镜像命令：</h3><ul>\n<li><p>查看镜像：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>q</td>\n<td>查看本地的镜像文件的id</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images        # 查看本地的镜像文件</span><br><span class=\"line\">docker images -q     # 查看本地的镜像文件的id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>搜索镜像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search 镜像名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拉取镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名称            # 不写版本号：（下载最新的）</span><br><span class=\"line\">docker pull 镜像名称:版本号     # 写版本号：  （docker官方搜索寻找版本号）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像id                 #  通过image id删除</span><br><span class=\"line\">docker rmi 镜像名称:版本号         # 通过镜像名+版本号删除</span><br><span class=\"line\">docker rmi $(docker images -q)    # 删除所有的镜像</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-操作容器命令：\"><a href=\"#4-操作容器命令：\" class=\"headerlink\" title=\"4.操作容器命令：\"></a>4.操作容器命令：</h3><ul>\n<li><p>查看容器：   </p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>查看所有状态的容器</td>\n</tr>\n<tr>\n<td>p</td>\n<td>查看所有容器的id</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps          # 查看正在运行的容器</span><br><span class=\"line\">docker ps -a       # 查看所有状态的容器</span><br><span class=\"line\">docker ps -aq      # 查看所有容器的id</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建容器：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>表示容器运行</td>\n</tr>\n<tr>\n<td>t</td>\n<td>表示给容器分配伪终端</td>\n</tr>\n<tr>\n<td>it</td>\n<td>表示容器创建后自动进入容器中，退出容器自动关闭</td>\n</tr>\n<tr>\n<td>d</td>\n<td>表示容器后台创建；需要命令进入容器；退出不会自动关闭容器</td>\n</tr>\n<tr>\n<td>id</td>\n<td>创建的容器一般称为交互式容器；id创建的容器一般称为守护式容器</td>\n</tr>\n<tr>\n<td>–name&#x3D;</td>\n<td>指定所创建容器的名称</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>将容器的 80端口映射到宿主机的 80 端口</td>\n</tr>\n<tr>\n<td>v</td>\n<td>挂载目录</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=容器名称 镜像名:版本号 /bin/bash           # 创建容器+伪终端</span><br><span class=\"line\">docker run -id --name==容器名称 镜像名:版本号 /bin/bash          # 创建容器+后台创建</span><br><span class=\"line\">docker run ... -v 宿主机目录（数据卷名）:容器内目录 镜像名称:7     # 创建容器+伪终端+挂载目录</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入容器：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>表示一直运行（除非关闭客户端）</td>\n</tr>\n<tr>\n<td>t</td>\n<td>表示给容器分配伪终端</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it 容器名 定义的指令</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>退出容器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动容器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 容器名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改容器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker update --restart always 容器ID   # 如果容器已经创建，可以通过以下方式更新重启策略（开机自启容器）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止容器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除容器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器名称           # 根据容器名称删除容器</span><br><span class=\"line\">docker rm 容器id            # 根据id删除容器</span><br><span class=\"line\">docker rm 容器名称:版本号    # 根据名称+（版本号）删除容器</span><br><span class=\"line\">docker rm -f 容器名称       # 强制删除容器</span><br><span class=\"line\">docker rm docker ps -aq   # 删除所有容器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看容器信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 容器名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看容器日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs 容器名         # 根据容器名查看日志</span><br><span class=\"line\">docker logs -f 容器名      # 根据容器名查看日志+跟踪日志</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"5-操作数据卷：\"><a href=\"#5-操作数据卷：\" class=\"headerlink\" title=\"5.操作数据卷：\"></a>5.操作数据卷：</h3><ul>\n<li><p>创建数据卷：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#自动创建在/var/lib/docker/volumes目录下</span><br><span class=\"line\">docker volume create 数据卷名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据卷：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume ls                  # 查看所有的数据卷名称</span><br><span class=\"line\">docker volume inspect 数据卷名称   # 查看指定数据卷的位置</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除数据卷</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker volume prune            # 删除所有未使用的数据卷</span><br><span class=\"line\">docker volume rm 数据卷名称     # 删除指定的数据卷</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-Docker-应用部署\"><a href=\"#5-Docker-应用部署\" class=\"headerlink\" title=\"5.Docker 应用部署\"></a>5.Docker 应用部署</h2><h3 id=\"1-部署MySQL\"><a href=\"#1-部署MySQL\" class=\"headerlink\" title=\"1.部署MySQL\"></a>1.部署MySQL</h3><ol>\n<li>搜索mysql镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取mysql镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class=\"line\">mkdir ~/mysql</span><br><span class=\"line\">cd ~/mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id \\</span><br><span class=\"line\">-p 3307:3306 \\</span><br><span class=\"line\">--name=c_mysql \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql/conf.d \\       </span><br><span class=\"line\">-v $PWD/logs:/logs \\</span><br><span class=\"line\">-v $PWD/data:/var/lib/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">mysql:5.6</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数说明：<ul>\n<li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li>\n<li><strong>$PWD</strong>：为显示当前目录位置</li>\n<li><strong>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d</strong>：将主机当前目录下的 conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;my.cnf。配置目录</li>\n<li><strong>-v $PWD&#x2F;logs:&#x2F;logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 &#x2F;logs。日志目录</li>\n<li><strong>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</strong> ：将主机当前目录下的data目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql 。数据目录</li>\n<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456：</strong>初始化 root 用户的密码。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">MYSQL8.0以后的版本需要需改加密规则</span></span><br><span class=\"line\">GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;;      # 授权</span><br><span class=\"line\">flush privileges;       # 刷新权限</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27; PASSWORD EXPIRE NEVER;      # 更改加密规则</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;      # 更新root用户密码</span><br><span class=\"line\">flush privileges;      # 刷新权限</span><br><span class=\"line\">docker restart [容器名]</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>进入容器，操作mysql</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><p>使用外部机器连接容器中的mysql（<strong>密码：123456</strong>）</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211206160946890.png\" alt=\"image-20211206160946890\"></p>\n</li>\n</ol>\n<h3 id=\"2-部署Tomcat\"><a href=\"#2-部署Tomcat\" class=\"headerlink\" title=\"2.部署Tomcat\"></a>2.部署Tomcat</h3><ol>\n<li>搜索tomcat镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search tomcat</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取tomcat镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull tomcat</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class=\"line\">mkdir ~/tomcat</span><br><span class=\"line\">cd ~/tomcat</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_tomcat \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-v $PWD:/usr/local/tomcat/webapps \\</span><br><span class=\"line\">tomcat </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数说明：</p>\n<ul>\n<li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p>\n<p><strong>-v $PWD:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps：</strong>将主机中当前目录挂载到容器的webapps</p>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>使用外部机器访问tomcat</li>\n</ol>\n<p><img src=\"D:\\Typora笔记\\4.西安欧鹏\\3.linux\\imgs\\1573649804623.png\" alt=\"1573649804623\"></p>\n<h3 id=\"3-部署Nginx\"><a href=\"#3-部署Nginx\" class=\"headerlink\" title=\"3.部署Nginx\"></a>3.部署Nginx</h3><ol>\n<li>搜索nginx镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取nginx镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class=\"line\">mkdir ~/nginx</span><br><span class=\"line\">cd ~/nginx</span><br><span class=\"line\">mkdir conf</span><br></pre></td></tr></table></figure>\n\n<p>返回上层目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br></pre></td></tr></table></figure>\n\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_nginx \\</span><br><span class=\"line\">-p 80:80 \\</span><br><span class=\"line\">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v $PWD/logs:/var/log/nginx \\</span><br><span class=\"line\">-v $PWD/html:/usr/share/nginx/html \\</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数说明：<ul>\n<li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li>\n<li><strong>-v $PWD&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</strong>：将主机当前目录下的 &#x2F;conf&#x2F;nginx.conf 挂载到容器的 :&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。配置目录</li>\n<li><strong>-v $PWD&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的&#x2F;var&#x2F;log&#x2F;nginx。日志目录</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>使用外部机器访问nginx</li>\n</ol>\n<p><img src=\"D:\\Typora笔记\\4.西安欧鹏\\3.linux\\imgs\\1573652396669.png\" alt=\"1573652396669\"></p>\n<h3 id=\"4-部署Redis\"><a href=\"#4-部署Redis\" class=\"headerlink\" title=\"4.部署Redis\"></a>4.部署Redis</h3><ol>\n<li>搜索redis镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search redis</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取redis镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis:5.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>上传redis.conf配置文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接：https:<span class=\"comment\">//pan.baidu.com/s/1hNZk4aXzlShhMFYcqLyKIQ </span></span><br><span class=\"line\">提取码：abcd</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_redis -p 6379:6379 -v $PWD/data:/data -v $PWD/redis.conf:/etc/redis/redis.conf redis:6.2.4</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>进入redis容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it c_redis /bin/bash</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>启动redis客户端：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-搭建博客程序：\"><a href=\"#6-搭建博客程序：\" class=\"headerlink\" title=\"6.搭建博客程序：\"></a>6.搭建博客程序：</h2><h3 id=\"1-搭建halo：\"><a href=\"#1-搭建halo：\" class=\"headerlink\" title=\"1.搭建halo：\"></a>1.搭建halo：</h3><ul>\n<li><p>安装JAVA：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install java-11-openjdk -y</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装mysql：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id \\</span><br><span class=\"line\">-p 3307:3306 \\</span><br><span class=\"line\">--name=b_mysql \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql/mysql.conf.d \\       </span><br><span class=\"line\">-v $PWD/logs:/var/logs \\</span><br><span class=\"line\">-v $PWD/data:/var/lib/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=$Rui123456 \\</span><br><span class=\"line\">mysql:8.0.32</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装halo：</p>\n<ul>\n<li><p>下载application.yaml模板：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/.halo &amp;&amp; cd ~/.halo</span><br><span class=\"line\">wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改application.yaml配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8090</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Response data gzip.</span></span><br><span class=\"line\">  <span class=\"attr\">compression:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># H2 database configuration.</span></span><br><span class=\"line\">    <span class=\"comment\"># driver-class-name: org.h2.Driver</span></span><br><span class=\"line\">    <span class=\"comment\">#url: jdbc:h2:file:~/.halo/db/halo</span></span><br><span class=\"line\">    <span class=\"comment\">#username: admin</span></span><br><span class=\"line\">    <span class=\"comment\">#password: 123456</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># MySQL database configuration.</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://8.130.17.95:3307/halodb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">&#x27;@Qv110119&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># H2 database console configuration.</span></span><br><span class=\"line\">  <span class=\"comment\">#h2:</span></span><br><span class=\"line\">  <span class=\"comment\">#  console:</span></span><br><span class=\"line\">  <span class=\"comment\">#    settings:</span></span><br><span class=\"line\">  <span class=\"comment\">#      web-allow-others: false</span></span><br><span class=\"line\">  <span class=\"comment\">#    path: /h2-console</span></span><br><span class=\"line\">  <span class=\"comment\">#    enabled: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">halo:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Your admin client path is https://your-domain/&#123;admin-path&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">admin-path:</span> <span class=\"string\">admin</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># memory or level</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span> <span class=\"string\">memory</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建halo容器：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-it</span> <span class=\"string\">-d</span> <span class=\"string\">--name</span> <span class=\"string\">halo</span> <span class=\"string\">-p</span> <span class=\"number\">8090</span><span class=\"string\">:8090</span> <span class=\"string\">-v</span> <span class=\"string\">~/.halo:/root/.halo</span> <span class=\"string\">--restart=unless-stopped</span> <span class=\"string\">halohub/halo:1.6.0</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-搭建hexo：\"><a href=\"#2-搭建hexo：\" class=\"headerlink\" title=\"2.搭建hexo：\"></a>2.搭建hexo：</h3><h2 id=\"7-Docker的网络：\"><a href=\"#7-Docker的网络：\" class=\"headerlink\" title=\"7.Docker的网络：\"></a>7.Docker的网络：</h2><h3 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1.概念：\"></a>1.概念：</h3><p>- </p>\n<ul>\n<li>作用：<ul>\n<li>容器间的互联和通信以及端口映射</li>\n<li>容器IP变动时候（容器内部网络可能发生变化），网络通信不受影响</li>\n</ul>\n</li>\n<li>ifconfig中的docker0虚拟网卡<ul>\n<li>负责宿主机和docker容器的通信</li>\n<li>负责docker容器之间的通信</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-基本命令：\"><a href=\"#2-基本命令：\" class=\"headerlink\" title=\"2.基本命令：\"></a>2.基本命令：</h3><ul>\n<li><p>当你安装docker时，它会自动创建三个网络，可使用如下命令查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@zhanglin dockerfile]# docker network ls</span><br><span class=\"line\">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class=\"line\">31b01340df19   bridge    bridge    local</span><br><span class=\"line\">84be79f83115   host      host      local</span><br><span class=\"line\">b8f15339e0e3   none      null      local</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看网络命令帮助：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network --help</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建docker网络：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create [网络名]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看指定的docker网络：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network inspect [网络名]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>连接容器到一个网络中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connect</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>断开网络中的一个网络</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network disconnect</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除指定的docker网络：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network rm [网络名]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除所有不使用的docker网络：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network prune </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-网络模式：\"><a href=\"#3-网络模式：\" class=\"headerlink\" title=\"3.网络模式：\"></a>3.网络模式：</h3><ul>\n<li><p>bridge模式：</p>\n<ul>\n<li><p>概念：默认模式，为每一容器创建网卡，分配IP，并将容器连接到docker0</p>\n</li>\n<li><p>图示：</p>\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230312161227047.png\" alt=\"image-20230312161227047\"></p>\n</li>\n</ul>\n</li>\n<li><p>host模式：</p>\n<ul>\n<li><p>容器不会虚拟出自己的网卡和IP，容器使用宿主机的IP和地址</p>\n</li>\n<li><p>图示：</p>\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230312162334136.png\" alt=\"image-20230312162334136\"></p>\n</li>\n</ul>\n</li>\n<li><p>none模式：</p>\n<ul>\n<li><p>概念：容器拥有自己的Network Namespace，没有任何网络配置</p>\n</li>\n<li><p>图示：</p>\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230312162847685.png\" alt=\"image-20230312162847685\"></p>\n</li>\n</ul>\n</li>\n<li><p>container模式：</p>\n<ul>\n<li><p>新创建的容器不会创建自己d额网卡和配置自己的IP，而是和一个指定的容器共享IP，端口范围</p>\n</li>\n<li><p>图示：</p>\n<p><img src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230312163019822.png\" alt=\"image-20230312163019822\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-DockerFile：\"><a href=\"#8-DockerFile：\" class=\"headerlink\" title=\"8.DockerFile：\"></a>8.DockerFile：</h2><h3 id=\"1-docker镜像原理：\"><a href=\"#1-docker镜像原理：\" class=\"headerlink\" title=\"1.docker镜像原理：\"></a>1.docker镜像原理：</h3><ul>\n<li>Linux文件系统由两部分组成：<ul>\n<li>boofs：包含bootloader（引导加载程序）和kernel（内核）</li>\n<li>rootfs：root文件系统，如：&#x2F;dev，&#x2F;etc，&#x2F;bin等</li>\n</ul>\n</li>\n<li>不同的发行版本，bootfs基本一样，rootfs不同</li>\n<li>Docker镜像的<strong>本质是分层的文件系统</strong>，<strong>由特殊的文件系统叠加而成</strong></li>\n<li>Docker镜像的组成：</li>\n</ul>\n<ol>\n<li><strong>最底层</strong>的是<strong>bootfs</strong>（为宿主机的bootfs）</li>\n<li>第二层为rootfs，也被称为基础镜像</li>\n<li>再往上为其他镜像</li>\n</ol>\n<ul>\n<li>说明：位于下方的镜像为父镜像，最低层的为<strong>基础镜像</strong></li>\n<li><strong>只读镜像</strong>：可以<strong>复用</strong>的镜像（不可以修改）</li>\n</ul>\n<h3 id=\"2-镜像制作：\"><a href=\"#2-镜像制作：\" class=\"headerlink\" title=\"2.镜像制作：\"></a>2.镜像制作：</h3><ul>\n<li><p>容器转为镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit 容器id 镜像名称:版本号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像转为压缩文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o 压缩文件名 镜像名称:版本号     # o(output)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将压缩文件转为镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i 压缩文件名                   # i(input)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-Dockerfile的概念：\"><a href=\"#3-Dockerfile的概念：\" class=\"headerlink\" title=\"3.Dockerfile的概念：\"></a>3.Dockerfile的概念：</h3><ul>\n<li>Docker是一个文本文件，文件中包含一条条指令</li>\n<li><strong>每一行指令构建一层镜像</strong>，基于基础镜像，最终构建出一个新的镜像</li>\n<li>作用：<ul>\n<li>提供完全一致的开发环境</li>\n<li>在部署时，可以实现应用的无缝链接</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-Dockerfile的使用：\"><a href=\"#4-Dockerfile的使用：\" class=\"headerlink\" title=\"4.Dockerfile的使用：\"></a>4.Dockerfile的使用：</h3><ul>\n<li><p>dockerfile的关键字：</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>from</td>\n<td>指定父镜像</td>\n<td>指定dockerfile基于那个image构建</td>\n</tr>\n<tr>\n<td>maintainer</td>\n<td>作者信息</td>\n<td>用来标注这个dockerfile是谁写的</td>\n</tr>\n<tr>\n<td>label</td>\n<td>标签</td>\n<td>可以代替maintainer</td>\n</tr>\n<tr>\n<td>run</td>\n<td>容器创建命令</td>\n<td>容器创建时执行</td>\n</tr>\n<tr>\n<td>cmd</td>\n<td>容器启动命令</td>\n<td>容器启动时执行，与挂载参数v冲突</td>\n</tr>\n<tr>\n<td>entrypoint</td>\n<td>入口</td>\n<td>容器启动时执行，与挂载参数v冲突</td>\n</tr>\n<tr>\n<td>copy</td>\n<td>复制文件</td>\n<td></td>\n</tr>\n<tr>\n<td>add</td>\n<td>添加文件</td>\n<td></td>\n</tr>\n<tr>\n<td>env</td>\n<td>环境变量</td>\n<td></td>\n</tr>\n<tr>\n<td>arg</td>\n<td>构建参数</td>\n<td></td>\n</tr>\n<tr>\n<td>volume</td>\n<td>构建数据卷</td>\n<td></td>\n</tr>\n<tr>\n<td>expose</td>\n<td>暴露端口</td>\n<td>容器暴露在外的端口，需要映射</td>\n</tr>\n<tr>\n<td>workdir</td>\n<td>工作目录</td>\n<td>进入容器时的默认路径</td>\n</tr>\n<tr>\n<td>user</td>\n<td>指定执行用户</td>\n<td></td>\n</tr>\n<tr>\n<td>build</td>\n<td>构建镜像</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java:8         # 指定父镜像</span><br><span class=\"line\">MAINTAINER qv123&lt;qv123@qq.com&gt;      # 注释</span><br><span class=\"line\">ADD springboot.jar ....     # 添加文件</span><br><span class=\"line\">CMD jar -jar springboot.jar      # 启动容器时执行的命令</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos:7                    # 指定父镜像</span><br><span class=\"line\">MAINTAINER qv123&lt;qv123@qq.com&gt;      # 注释</span><br><span class=\"line\">RUN yum install -y vim           # 启动容器时执行的命令</span><br><span class=\"line\">WORKDIR /usr/local               # 指定默认工作目录</span><br><span class=\"line\">CMD /bin/bash                    # 启动容器时执行的命令</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构建镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -f dockerfile文件路径 -t 镜像名称:版本 . </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"9-Docker服务编排：\"><a href=\"#9-Docker服务编排：\" class=\"headerlink\" title=\"9.Docker服务编排：\"></a>9.Docker服务编排：</h2><h3 id=\"1-服务编排概念：\"><a href=\"#1-服务编排概念：\" class=\"headerlink\" title=\"1.服务编排概念：\"></a>1.服务编排概念：</h3><ul>\n<li>按照一定的业务规则批量管理容器</li>\n</ul>\n<h3 id=\"2-Docker-Compose概述\"><a href=\"#2-Docker-Compose概述\" class=\"headerlink\" title=\"2.Docker Compose概述:\"></a>2.Docker Compose概述:</h3><ul>\n<li>Docker Compose是一个编排多容器分布式部署的工具</li>\n<li>提供命令集管理容器化应用d额完整开发周期，包括服务构建，启动和停止</li>\n<li>使用步骤<ol>\n<li>使用Dockerfile定义运行环境镜像</li>\n<li>使用docker-compose.yml定义组成应用的各种服务</li>\n<li>运行docker-compose up启动应用</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-安装和卸载Docker-Compose\"><a href=\"#3-安装和卸载Docker-Compose\" class=\"headerlink\" title=\"3.安装和卸载Docker Compose:\"></a>3.安装和卸载Docker Compose:</h3><ul>\n<li><p>二进制方式：</p>\n<ul>\n<li><p>安装：</p>\n<ul>\n<li><p>curl下载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置文件可执行权限：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看compose版本信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -version</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>卸载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-Docker-compose的使用：\"><a href=\"#4-Docker-compose的使用：\" class=\"headerlink\" title=\"4.Docker-compose的使用：\"></a>4.Docker-compose的使用：</h3><ul>\n<li><p>创建Docker-compose文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim docker-compose.yml    # 必须叫此名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写docker-compose.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span> <span class=\"string\">springboot</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./nginx/conf.d:/etc/nginx/conf.d</span>    <span class=\"comment\"># 创建外部目录</span></span><br><span class=\"line\">  <span class=\"attr\">springboot:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">springboot</span></span><br><span class=\"line\">    <span class=\"attr\">expose:</span> <span class=\"string\">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本目录下使用docker compose启动容器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"10-Docker的私有仓库：\"><a href=\"#10-Docker的私有仓库：\" class=\"headerlink\" title=\"10.Docker的私有仓库：\"></a>10.Docker的私有仓库：</h2><h3 id=\"1-搭建私有仓库：\"><a href=\"#1-搭建私有仓库：\" class=\"headerlink\" title=\"1.搭建私有仓库：\"></a>1.搭建私有仓库：</h3><ul>\n<li><p>拉取私有仓库镜像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动私有仓库容器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检测是否搭建成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:5000/v2/_catelog</span><br><span class=\"line\"># 成功显示：&#123;&quot;repositories&quot;:[]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改daemon.json，添加键值对：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加内容</span></span><br><span class=\"line\">&#123;&quot;insecure-registries&quot;:[&quot;IP地址:5000&quot;]&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启docker服务，重启私有仓库容器</p>\n</li>\n</ul>\n<h3 id=\"2-上传镜像至私有仓库：\"><a href=\"#2-上传镜像至私有仓库：\" class=\"headerlink\" title=\"2.上传镜像至私有仓库：\"></a>2.上传镜像至私有仓库：</h3><ul>\n<li><p>标记镜像为私有仓库的镜像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag centos:7 IP地址:5000/centos:7</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传标记的镜像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push IP地址:5000/centos:7</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-从私有仓库拉取镜像：\"><a href=\"#3-从私有仓库拉取镜像：\" class=\"headerlink\" title=\"3.从私有仓库拉取镜像：\"></a>3.从私有仓库拉取镜像：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull IP地址:5000/centos:7</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","_path":"2023/03/13/3.linux/B1.Docker容器/","_link":"https://example.com/2023/03/13/3.linux/B1.Docker%E5%AE%B9%E5%99%A8/","_id":"clf8visfr000b9kq4feqk5d17"}}