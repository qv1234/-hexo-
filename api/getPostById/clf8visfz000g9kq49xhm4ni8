{"type":"getPostById","data":{"title":"git工具","date":"2023-03-13T12:32:23.845Z","description":"","categories":[{"name":"Linux","_id":"clf8visfd00049kq4bz35ggc4"}],"tags":[{"name":"Linux","_id":"clf8visfg00059kq4dwn56651"}],"content":"<h2 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1.概念：\"></a>1.概念：</h2><ul>\n<li><p>Git是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>\n</li>\n<li><p>Git是一个分布式版本控制工具，通常用来对软件开发过程中的源代码文件进行管理，通过Git仓库来存储和管理这些文件</p>\n</li>\n<li><p>Git仓库分为两种：</p>\n<ul>\n<li><p>本地仓库：开发人员自己电脑上的Git仓库</p>\n</li>\n<li><p>远程仓库：远程服务器上的Git</p>\n</li>\n</ul>\n</li>\n<li><p>功能：1.代码回溯，2.版本切换，3.多人协作，4.远程备份</p>\n</li>\n<li><p><strong>版本库：</strong>前面看到的.git隐藏文件夹就是版本库（<strong>本地仓库</strong>），版本库中存储了很多配置信息，日志信息和文件版本信息等</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803083050202.png\" alt=\"image-20220803083050202\"></p>\n</li>\n<li><p><strong>工作区：</strong>包含.git文件夹的目录就是工作区，也称工作目录，主要用于存放开发的代码</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803083036602.png\" alt=\"image-20220803083036602\"></p>\n</li>\n<li><p><strong>暂存区：</strong>.git文件夹中有很多文件，其中有一个index文件就是暂存区，也可以叫做stage。暂存区是一个临时保存修改文件的地方</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803083021407.png\" alt=\"image-20220803083021407\"></p>\n</li>\n</ul>\n<h2 id=\"2-Git工作流程图：\"><a href=\"#2-Git工作流程图：\" class=\"headerlink\" title=\"2.Git工作流程图：\"></a>2.Git工作流程图：</h2><p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211224152340832.png\" alt=\"image-20211224152340832\"></p>\n<p><strong>命令如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> clone（克隆）: 从远程仓库中克隆代码到本地仓库</span><br><span class=\"line\"><span class=\"number\">2.</span> checkout （检出）:从本地仓库中检出一个仓库分支然后进行修订</span><br><span class=\"line\"><span class=\"number\">3.</span> add（添加）: 在提交前先将代码提交到暂存区</span><br><span class=\"line\"><span class=\"number\">4.</span> commit（提交）: 提交到本地仓库。本地仓库中保存修改的各个历史版本</span><br><span class=\"line\"><span class=\"number\">5.</span> fetch (抓取) ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</span><br><span class=\"line\"><span class=\"number\">6.</span> pull (拉取) ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于</span><br><span class=\"line\">fetch+merge</span><br><span class=\"line\"><span class=\"number\">7.</span> push（推送） : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Git的安装：\"><a href=\"#3-Git的安装：\" class=\"headerlink\" title=\"3.Git的安装：\"></a>3.Git的安装：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接：https://pan.baidu.com/s/1LSqwv-rRrzpGIYFabJD1zA </span><br><span class=\"line\">提取码：abcd</span><br><span class=\"line\"></span><br><span class=\"line\">安装步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">https://blog.csdn.net/wyg1973017714/article/details/105217864/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Git的一般配置：\"><a href=\"#4-Git的一般配置：\" class=\"headerlink\" title=\"4.Git的一般配置：\"></a>4.Git的一般配置：</h2><ul>\n<li><p>备注：</p>\n<ul>\n<li><p>Git GUI：Git提供的图形界面工具</p>\n</li>\n<li><p>Git Bash：Git提供的命令行工具</p>\n</li>\n<li><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用</p>\n<p>该用户信息</p>\n</li>\n</ul>\n</li>\n<li><p><strong>基本配置</strong>：</p>\n<ol>\n<li><p>打开Git Bash</p>\n</li>\n<li><p>设置用户信息:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;用户名&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;邮箱地址&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看配置信息:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name</span><br><span class=\"line\">git config --global user.email</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不设置报错</p>\n</li>\n</ol>\n</li>\n<li><p><strong>为常用指令配置别名（可选）</strong></p>\n<ol>\n<li><p>打开gitBash,执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ~/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在C:\\Users\\user下打开文件 .bashrc，输入如下内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#用于输出git提交日志 </span><br><span class=\"line\">alias git-log=<span class=\"string\">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span> </span><br><span class=\"line\">#用于输出当前目录所有文件及基本信息 </span><br><span class=\"line\">alias ll=<span class=\"string\">&#x27;ls -al&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开gitBash，执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>解决GitBash乱码问题</strong></p>\n<ol>\n<li><p>打开GitBash执行下面命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在git安装目录下 &#x2F;ect&#x2F;bash.bashrc 文件最后加入下面两行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LANG=<span class=\"string\">&quot;zh_CN.UTF-8&quot;</span> </span><br><span class=\"line\">export LC_ALL=<span class=\"string\">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"5-获取本地仓库：\"><a href=\"#5-获取本地仓库：\" class=\"headerlink\" title=\"5.获取本地仓库：\"></a>5.获取本地仓库：</h2><ul>\n<li><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p>\n<ol>\n<li><p>在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库</p>\n</li>\n<li><p>进入这个目录中，点击右键打开Git bash窗口</p>\n</li>\n<li><p>执行命令</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果创建成功后可在文件夹下看到隐藏的**.git目录**。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"6-基本操作命令：\"><a href=\"#6-基本操作命令：\" class=\"headerlink\" title=\"6.基本操作命令：\"></a>6.基本操作命令：</h2><ul>\n<li><p>Git工作目录下对于文件的<strong>修改</strong>(增加、删除、更新)会存在几个状态，这些<strong>修改</strong>的状态会随着我们执行Git的命令而发生变化。</p>\n</li>\n<li><p>Git工作区中的文件存在两种状态：</p>\n<ul>\n<li>untracked（未跟踪）：未被纳入版本控制</li>\n<li>tracked（已跟踪）：被纳入版本控制</li>\n</ul>\n</li>\n<li><p>已跟踪的文件存在三种状态：1.Unmodified未修改状态，2.Modified已修改状态，3.Staged已暂存状态</p>\n</li>\n<li><p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211224162643741.png\" alt=\"image-20211224162643741\"></p>\n</li>\n<li><p>使用命令来控制这些状态之间的转换，其他操作</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git status</td>\n<td>查看的文件修改的状态（暂存区、工作区）</td>\n</tr>\n<tr>\n<td>git add</td>\n<td>工作区 –&gt; 暂存区</td>\n</tr>\n<tr>\n<td>git reset</td>\n<td>将暂存区的文件取消暂存或者是切换到指定版本</td>\n</tr>\n<tr>\n<td>git commit</td>\n<td>暂存区 –&gt; 本地仓库</td>\n</tr>\n<tr>\n<td>git log</td>\n<td>查看日志</td>\n</tr>\n<tr>\n<td>git reflog</td>\n<td>查看已经删除的记录</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.添加单个文件到暂存区</span></span><br><span class=\"line\">git add 单个文件名+后缀</span><br><span class=\"line\"><span class=\"comment\">//2.将所有修改文件添加到暂存区  </span></span><br><span class=\"line\">git add .    </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释内容&quot;</span>    <span class=\"comment\">//提交暂存区内容到本地仓库的当前分支</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释内容&quot;</span> hello.txt  <span class=\"comment\">//提交指定文件</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log   <span class=\"comment\">//查看提交记录</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset hello.txt   <span class=\"comment\">//取消暂存</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commitID    <span class=\"comment\">//commitID 可以使用 git-log 或 git log 指令查看</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git log 参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>显示所有分支</td>\n</tr>\n<tr>\n<td>pretty&#x3D;oneline</td>\n<td>将提交信息显示为一行</td>\n</tr>\n<tr>\n<td>abbrev-commit</td>\n<td>使得输出的commitId更简短</td>\n</tr>\n<tr>\n<td>graph</td>\n<td>以图的形式显示</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"7-远程仓库操作命令：\"><a href=\"#7-远程仓库操作命令：\" class=\"headerlink\" title=\"7.远程仓库操作命令：\"></a>7.远程仓库操作命令：</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git remote</td>\n<td>查看远程仓库</td>\n</tr>\n<tr>\n<td>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</td>\n<td>添加远程仓库，远端名称：默认是origin</td>\n</tr>\n<tr>\n<td>git clone &lt;仓库路径&gt; [本地目录]</td>\n<td>从远程仓库克隆</td>\n</tr>\n<tr>\n<td>git fetch [remote name] [branch name]</td>\n<td>从远程仓库抓取，将仓库里的更新都抓取到本地，不会进行合并</td>\n</tr>\n<tr>\n<td>git pull  [remote name] [branch name]</td>\n<td>从远程仓库拉取，将远端仓库的修改拉到本地并自动进行合并</td>\n</tr>\n<tr>\n<td>git push &lt;远端名称&gt; &lt;本地分支名&gt;</td>\n<td>推送到远程仓库</td>\n</tr>\n<tr>\n<td>git branch -vv</td>\n<td>查看本地分支和远程分支的对应关系</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote    <span class=\"comment\">//查看远端名称</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote  -v   <span class=\"comment\">//查看远端名称，url，等</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git<span class=\"meta\">@gitee</span>.com:blue-fantasy/git_test.git   <span class=\"comment\">//建立连接</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git<span class=\"meta\">@gitee</span>.com:blue-fantasy/git_test.git [本地目录]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//克隆指定分支的代码到当前目录</span></span><br><span class=\"line\">git clone -b product git<span class=\"meta\">@gitee</span>.com:blue-fantasy/git_test.git </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master    <span class=\"comment\">//origin：本地分支，master远端分支</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin master   <span class=\"comment\">//-f 表示强制覆盖</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin master:master   <span class=\"comment\">//--set-upstream：推送到远端的同时并且建立起和远端分支的关联关系</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push   <span class=\"comment\">//当前分支已经和远端分支关联</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8-分支命令：\"><a href=\"#8-分支命令：\" class=\"headerlink\" title=\"8.分支命令：\"></a>8.分支命令：</h2><ul>\n<li><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离</p>\n<p>开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p>\n</li>\n<li><p>分支命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git branch</td>\n<td>查看本地分支</td>\n</tr>\n<tr>\n<td>git branch [ name ]</td>\n<td>创建本地分支</td>\n</tr>\n<tr>\n<td>git branch -d [ name ]</td>\n<td>删除分支时，需要做各种检查(不能删除当前分支，只能删除其他分支)</td>\n</tr>\n<tr>\n<td>git branch -D [ name ]</td>\n<td>不做任何检查，强制删除 (不能删除当前分支，只能删除其他分支)</td>\n</tr>\n<tr>\n<td>git checkout [ name ]</td>\n<td>切换分支</td>\n</tr>\n<tr>\n<td>git checkout -b [ name ]</td>\n<td>创建并切换分支</td>\n</tr>\n<tr>\n<td>git push [ shortName ] [ name ]</td>\n<td>推送至远程仓库分支</td>\n</tr>\n<tr>\n<td>git merge [ name ]</td>\n<td>合并分支，将其他分支合并到当前分支</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"9-解决冲突\"><a href=\"#9-解决冲突\" class=\"headerlink\" title=\"9.解决冲突:\"></a>9.解决冲突:</h2><ul>\n<li><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解</p>\n<p>决冲突，解决冲突步骤如下：</p>\n<ol>\n<li>处理文件中冲突的地方</li>\n<li>将解决完冲突的文件加入暂存区(add)</li>\n<li>提交到仓库(commit)</li>\n</ol>\n</li>\n<li><p>冲突部分的内容处理如下所示：</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211225093914373.png\" alt=\"image-20211225093914373\"></p>\n</li>\n</ul>\n<h2 id=\"10-开发中分支使用原则与流程\"><a href=\"#10-开发中分支使用原则与流程\" class=\"headerlink\" title=\"10.开发中分支使用原则与流程:\"></a>10.开发中分支使用原则与流程:</h2><ul>\n<li><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离</p>\n<p>开来进行重大的Bug修改、开发新的功能，以免影响开发主线</p>\n</li>\n<li><p>在开发中，一般有如下分支使用原则与流程：</p>\n<ul>\n<li><p><strong>master （生产） 分支</strong></p>\n<p>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</p>\n</li>\n<li><p><strong>develop（开发）分支</strong></p>\n<p>是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线</p>\n<p>要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</p>\n</li>\n<li><p><strong>feature&#x2F;xxxx分支</strong></p>\n<p>从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完</p>\n<p>成后合并到develop分支\t</p>\n</li>\n<li><p><strong>hotfifix&#x2F;xxxx分支</strong></p>\n<p>从master派生的分支，一般作为<strong>线上bug修复使用</strong>，修复完成后需要合并到master、test、</p>\n<p>develop分支</p>\n</li>\n<li><p>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等</p>\n<p>等。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"11-标签操作命令：\"><a href=\"#11-标签操作命令：\" class=\"headerlink\" title=\"11.标签操作命令：\"></a>11.标签操作命令：</h2><ul>\n<li><p>Git中的标签，指的是某个分支某个特定时间点的状态（快照），通过标签，可以很方便的切换到标记时的状态</p>\n</li>\n<li><p>操作命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git tag</td>\n<td>列出已有的标签</td>\n</tr>\n<tr>\n<td>git tag [ name ]</td>\n<td>创建标签</td>\n</tr>\n<tr>\n<td>git push [ shortName ] [ name ]</td>\n<td>将标签推送至远程仓库</td>\n</tr>\n<tr>\n<td>git checkout -b [ branch ] [ name ]</td>\n<td>检出标签</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"12-常用的托管服务：\"><a href=\"#12-常用的托管服务：\" class=\"headerlink\" title=\"12.常用的托管服务：\"></a>12.<strong>常用的托管服务</strong>：</h2><ul>\n<li><p>前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库 </p>\n<p>呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</p>\n</li>\n<li><p><strong>gitHub</strong>（ 地址：<a href=\"https://github.com/\">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持 </p>\n<p>Git 作为唯一的版本库格式进行托管，故名gitHub </p>\n</li>\n<li><p><strong>码云</strong>（地址： <a href=\"https://gitee.com/\">https://gitee.com/</a> ）是国内的一个代码托管平台，由于<strong>服务器在国内</strong>，所以相比于 </p>\n<p>GitHub，码云速度会更快 </p>\n</li>\n<li><p><strong>GitLab</strong> （地址： <a href=\"https://about.gitlab.com/\">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作 </p>\n<p>为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</p>\n</li>\n</ul>\n<h2 id=\"13-配置SSH公钥\"><a href=\"#13-配置SSH公钥\" class=\"headerlink\" title=\"13.配置SSH公钥:\"></a>13.配置SSH公钥:</h2><ul>\n<li><p>生成SSH公钥-步骤：</p>\n<ul>\n<li><pre><code class=\"java\">ssh-keygen -t rsa\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 不断回车，如果公钥已经存在，则自动覆盖</span><br><span class=\"line\"></span><br><span class=\"line\">- Gitee设置账户共公钥</span><br><span class=\"line\"></span><br><span class=\"line\">  - 获取公钥</span><br><span class=\"line\"></span><br><span class=\"line\">    ```java</span><br><span class=\"line\">    cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211225164351696.png\" alt=\"image-20211225164351696\"></p>\n</li>\n<li><p>验证是否配置成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git<span class=\"meta\">@gitee</span>.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"14-在Idea中操作Git：\"><a href=\"#14-在Idea中操作Git：\" class=\"headerlink\" title=\"14.在Idea中操作Git：\"></a>14.在Idea中操作Git：</h2><ul>\n<li><p>场景：本地已经有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员</p>\n<p>继续一起协作开发</p>\n</li>\n<li><p>初始化本地仓库，将此项目设置为本地仓库</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211225190826507.png\" alt=\"image-20211225190826507\"></p>\n</li>\n<li><p>设置远程仓库1.Name：远程仓库的名称，2.URL：远程仓库的地址</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211225194141712.png\" alt=\"image-20211225194141712\"></p>\n</li>\n<li><p>关闭代码检查：</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803124844798.png\" alt=\"image-20220803124844798\"></p>\n</li>\n<li><p>推送到远程仓库，1.master本地仓库分支，2.dev远程仓库名称，3.development远程仓库分支</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803125125742.png\" alt=\"image-20220803125125742\"></p>\n</li>\n<li><p>克隆远程仓库到本地，上方Git——&gt;clone</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20211225195630631.png\" alt=\"image-20211225195630631\"></p>\n</li>\n<li><p>查看或是设置分支：</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803130104915.png\" alt=\"image-20220803130104915\"></p>\n</li>\n<li><p>推送当前分支到远程仓库：</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803130810306.png\" alt=\"image-20220803130810306\"></p>\n</li>\n<li><p>切换成其他分支：</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803130931427.png\" alt=\"image-20220803130931427\"></p>\n</li>\n<li><p>合并选中的其他分支到当前分支：</p>\n<p><img src=\"C:\\Users\\user\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220803131146944.png\" alt=\"image-20220803131146944\"></p>\n</li>\n</ul>\n","_path":"2023/03/13/3.linux/C1.git工具/","_link":"https://example.com/2023/03/13/3.linux/C1.git%E5%B7%A5%E5%85%B7/","_id":"clf8visfz000g9kq49xhm4ni8"}}